use casper_engine_test_support::{
    DeployItemBuilder, ExecuteRequestBuilder, InMemoryWasmTestBuilder, ARG_AMOUNT,
    DEFAULT_ACCOUNT_ADDR, DEFAULT_PAYMENT, DEFAULT_RUN_GENESIS_REQUEST,
};
use casper_types::{runtime_args, RuntimeArgs};

fn main() {
    let input = vec![
        0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x10, 0x03, 0x60,
        0x02, 0x7f, 0x7f, 0x00, 0x60, 0x00, 0x00, 0x60, 0x03, 0x7f, 0x7f, 0x7f,
        0x01, 0x7f, 0x02, 0x12, 0x01, 0x03, 0x65, 0x6e, 0x76, 0x0a, 0x63, 0x61,
        0x73, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x00, 0x00, 0x03, 0x03,
        0x02, 0x01, 0x02, 0x05, 0x03, 0x01, 0x00, 0x0b, 0x07, 0x11, 0x02, 0x06,
        0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00, 0x04, 0x63, 0x61, 0x6c,
        0x6c, 0x00, 0x01, 0x0a, 0x5e, 0x02, 0x32, 0x01, 0x11, 0x7f, 0x20, 0x00,
        0x42, 0x84, 0xd3, 0x8c, 0xb7, 0xc1, 0xdb, 0x82, 0xd3, 0x60, 0x20, 0x00,
        0x41, 0x10, 0x6a, 0x41, 0x12, 0x41, 0xd0, 0x86, 0x03, 0x10, 0x82, 0x80,
        0x80, 0x80, 0x00, 0x1a, 0x20, 0x00, 0x41, 0x0c, 0x6a, 0x41, 0xd4, 0x86,
        0x2f, 0x10, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x0b, 0x29, 0x01, 0x01,
        0x7f, 0x03, 0x40, 0x41, 0x00, 0x45, 0x0d, 0x00, 0x20, 0x00, 0x21, 0x03,
        0x03, 0x40, 0x20, 0x03, 0x20, 0x01, 0x3a, 0x00, 0x00, 0x20, 0x03, 0x21,
        0x03, 0x20, 0x02, 0x41, 0x7f, 0x6a, 0x22, 0x02, 0x0d, 0x00, 0x0b, 0x0b,
        0x20, 0x00, 0x0b
    ];
    let deploy_1 = DeployItemBuilder::new()
        .with_address(*DEFAULT_ACCOUNT_ADDR)
        .with_session_bytes(input.to_vec(), RuntimeArgs::new())
        .with_empty_payment_bytes(runtime_args! { ARG_AMOUNT => *DEFAULT_PAYMENT, })
        .with_authorization_keys(&[*DEFAULT_ACCOUNT_ADDR])
        .with_deploy_hash([123; 32])
        .build();
    let exec_request_1 = ExecuteRequestBuilder::new().push_deploy(deploy_1).build();
    let mut builder = InMemoryWasmTestBuilder::default();
    builder
        .run_genesis(&DEFAULT_RUN_GENESIS_REQUEST)
        .exec(exec_request_1)
        .commit();
}
